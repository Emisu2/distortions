{"version":3,"sources":["../../src/Components/FlippableCard.js","../../src/Components/CardList.js","../../src/Components/SearchBox.js","../../src/Components/Scroll.js","../../src/Components/distortions.js","../../src/Containers/App.js","../../src/serviceWorker.js","../../src/index.js"],"names":["FlippableCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isFlipped","handleClick","bind","assertThisInitialized","e","preventDefault","setState","prevState","react_default","a","createElement","className","react_card_flip_default","flipDirection","key","onClick","src","props","username","alt","style","fontWeight","name","email","Component","CardList","_ref","distortions","map","user","i","Components_FlippableCard","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","overflowY","border","height","children","id","App","onSearchChange","event","target","value","_this$state","filteredDistortions","filter","distortion","toLowerCase","includes","length","href","Components_SearchBox","Components_Scroll","Components_CardList","class","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4081418b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\n\r\n\r\nclass FlippableCard extends Component {\r\n  constructor() {\r\n    super();\r\n      this.state = {\r\n      isFlipped: false\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n \r\n  handleClick(e) {\r\n    e.preventDefault();\r\n    this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\r\n  }\r\n \r\n render() {\r\n    return (\r\n\t    <div className = 'dib'>\r\n\t      <ReactCardFlip isFlipped={this.state.isFlipped} flipDirection=\"horizontal\"> \r\n\t\t\t<div key=\"front\" onClick={this.handleClick} className = 'tc bg-white  br3 pa3 ma2 grow bw2 shadow-5 mw5 w5 h5'>\r\n\t\t\t\t<div>\r\n\t\t\t\t<img src = {this.props.username} alt = 'distortion'/>\r\n\t\t\t\t<p style={{fontWeight: 'bold'}} >{this.props.name}</p>\r\n\t\t\t\t</div>\r\n\t       \t</div>\r\n\t        <div key=\"back\" onClick={this.handleClick} className = 'tc bg-white  br3 pa3 ma2 grow bw2 shadow-5 mw5 w5 h5'>\r\n\t          \t<div>\r\n\t          \t<h1>{this.props.name}</h1>\r\n\t\t\t\t<p>{this.props.email}</p>\r\n\t       \t\t</div>\r\n\t        </div>\r\n\t      </ReactCardFlip>\r\n\t     </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FlippableCard;","import React from 'react';\r\nimport FlippableCard from './FlippableCard';\r\n\r\nconst CardList = ({ distortions }) => {\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\tdistortions.map((user,i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<FlippableCard\r\n\t\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\t\tusername={distortions[i].username} \r\n\t\t\t\t\t\t\t\tname={distortions[i].name} \r\n\t\t\t\t\t\t\t\temail={distortions[i].email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--purple bg-lightest-purple'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search distortions' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","export const distortions = [\r\n  {\r\n    id: 1,\r\n    name: 'Filter',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/filtering-150x150.jpg',\r\n    email: 'A person engaging in filter (or \"mental filtering\") takes the negative details and magnifies those details while filtering out all positive aspects of a situation.'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Polarize',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/polarizedthinking-150x150.jpg',\r\n    email: 'In polarized thinking, things are either “black-or-white” — all or nothing. We have to be perfect or we’re a complete and abject failure — there is no middle ground.'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Generalize',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/overgeneralization-150x150.jpg',\r\n    email: 'In this cognitive distortion, a person comes to a general conclusion based on a single incident or a single piece of evidence. Known as overgeneralization.'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Mind Read',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/jumpingconclusions-150x150.jpg',\r\n    email: 'Without individuals saying so, a person who jumps to conclusions knows what another person is feeling and thinking — and exactly why they act the way they do.'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Catastrophize',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/catastrophizing-150x150.jpg',\r\n    email: 'When a person engages in catastrophizing, they expect disaster to strike, no matter what. This is also referred to as magnifying, or imagining the worst.'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Personalize',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/personalization-150x150.jpg',\r\n    email: 'Personalization is a distortion where a person believes that everything others do or say is some kind of direct, personal reaction to them. They also compare themselves to others.'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Control',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/controlfallacy-150x150.jpg',\r\n    email: 'This distortion involves two different but related beliefs about being in complete control of every situation in a person’s life: Externally (helpless), and Internally (blaming ourselves).'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Fairness',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/fallacyfairness-150x150.jpg',\r\n    email: 'In the fallacy of fairness, a person feels resentful because they think that they know what is fair, but other people won’t agree with them.  “Life isn’t always fair.” '\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Blame',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/blaming-150x150.jpg',\r\n    email: 'When a person engages in blaming, they hold other people responsible for their emotional pain. They may also take the opposite track and instead blame themselves.'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Shoulds',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/shoulds-150x150.jpg',\r\n    email: 'Should statements appear as a rules about how every person should behave. For example, “I really should exercise. I shouldn’t be so lazy.” The emotional consequence is guilt.'\r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'Reason',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/emotionalreasoning-150x150.jpg',\r\n    email: 'The distortion of emotional reasoning can be summed up by the statement, “If I feel that way, it must be true.” Whatever a person is feeling is believed to be true automatically.'\r\n  },\r\n    {\r\n    id: 12,\r\n    name: 'Change',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/fallacychange-150x150.jpg',\r\n    email: 'In the fallacy of change, a person expects that other people will change to suit them if they just pressure or cajole them enough. A person needs to change people.'\r\n  },\r\n    {\r\n    id: 13,\r\n    name: 'Mislabel',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/globallabeling-150x150.jpg',\r\n    email: 'When In global labeling (also referred to as mislabeling), a person generalizes one or two qualities into a negative global judgment about themselves or another person.'\r\n  },\r\n    {\r\n    id: 14,\r\n    name: 'Be Right',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/alwaysright-150x150.jpg',\r\n    email: 'When a person engages in this distortion, they are continually putting other people on trial to prove that their own opinions and actions are the absolute correct ones.'\r\n  },\r\n    {\r\n    id: 15,\r\n    name: 'Reward',\r\n    username: 'https://g6.psychcentral.com/lib/wp-content/uploads/2016/05/heavensfallacy-150x150.jpg',\r\n    email: 'This is the false belief that a person’s sacrifice and self-denial will eventually pay off, as if some global force is keeping score.  You will feel bitter when the reward doesn’t come.'\r\n  }\r\n];","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nimport {distortions} from '../Components/distortions'\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor () {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tdistortions: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({ distortions });\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { distortions, searchfield } = this.state;\r\n\t\tconst filteredDistortions = distortions.filter(distortion => {\r\n\t\t\treturn distortion.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\t\treturn !distortions.length ? \r\n\t\t\t<h2 class='tc'>LOADING</h2> :\r\n\t\t\t(\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1 className='f2'>COGNITIVE DISTORTIONS</h1>\r\n\t\t\t\t\t<h2>Made with love by Emily as a supplement to <a href=\"https://psychcentral.com/lib/15-common-cognitive-distortions/\">PsychCentral article by John M. Grohol, Psy.D.</a></h2>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList distortions={filteredDistortions}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}